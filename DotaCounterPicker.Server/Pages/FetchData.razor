@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using Blazored.Modal
@using Blazored.Modal.Services
@using DotaCounterPicker.Core
@using DotaCounterPicker.Server.Data
@using DotaCounterPicker.Server.Utils
@using DotaCounterPicker.Services
@inject IHeroLoader HeroLoader
@inject HeroParser HeroParser

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>


@if (_isBusy)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Disadvantage</th>
            </tr>
        </thead>
        <tbody>
                @foreach(var hero in Calculate()){
                    <tr>
                        <td>@hero.Name</td>
                        <td>@hero.Disadvantage</td>
                    </tr>
                }
               
        </tbody>
    </table>
}

@code {
    private bool _isBusy = false;


    [Parameter]
    public IList<string> HeroNames { get; set; } = new List<string>();

    private IDictionary<string, IEnumerable<DotaHero>> _heroes = new Dictionary<string, IEnumerable<DotaHero>>();

    protected override async Task OnParametersSetAsync()
    {
        _isBusy = true;
        foreach(var name in HeroNames)
        {
            if (name != GlobalConsts.EmptyHero)
            {
                var html = await HeroLoader.LoadHero(name);
                _heroes[name] = HeroParser.ParseHero(html);
            }
        }
        _isBusy = false;
    }

    private IEnumerable<DotaHero> Calculate()
    {
        List<DotaHero> heroes = new List<DotaHero>();
        var groups = _heroes.SelectMany(h => h.Value).GroupBy(h => h.Name);
        foreach (var group in groups)
        {
            if (group.Count() == _heroes.Count)
            {
                var dotaHeroes = group.Select(g => g);
                double disadvantage = 0;
                foreach (var hero in dotaHeroes)
                {
                    disadvantage += hero.Disadvantage;
                }
                heroes.Add(new DotaHero(group.Key, disadvantage));
            } 
        }
        return heroes;
    }
}
