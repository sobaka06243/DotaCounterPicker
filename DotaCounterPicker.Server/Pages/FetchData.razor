@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using Blazored.Modal
@using Blazored.Modal.Services
@using DotaCounterPicker.Core
@using DotaCounterPicker.Server.Utils
@using DotaCounterPicker.Services
@inject IHeroLoader HeroLoader
@inject HeroParser HeroParser

<h1  class="text-center">Matchups</h1>

@if (_isBusy)
{
    <p class="text-center"><em>Loading...</em></p>
}
else
{

    <table class="table table-striped mx-auto w-auto">
        <thead>
            <tr>
                <th>Name</th>
                <th>Disadvantage</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hero in _calculatedHeroes)
            {
                    <tr>
                        <td>
                            <div class="d-flex">
                            <img width="45" height="26"  src="heroes/@GetHeroImageName(hero.Name)" />
                            <div>@hero.Name</div>
                        </div>
                            </td>
                        <td>@hero.Disadvantage</td>
                    </tr>
                }
               
        </tbody>
    </table>
}
    
@code {
    private bool _isBusy = false;
    private IEnumerable<string> _cachedHeroNames = new List<string>();
    private IEnumerable<DotaHero> _calculatedHeroes = new List<DotaHero>();


    [Parameter]
    public IEnumerable<string> HeroNames { get; set; } = new List<string>();

    private IDictionary<string, IEnumerable<DotaHero>> _heroes = new Dictionary<string, IEnumerable<DotaHero>>();

    protected override async Task OnParametersSetAsync()
    {
        _isBusy = true;
        bool canCalculate = false;
        List<string> heroToRemove = new List<string>();
        foreach (var hero in _heroes)
        {
            if(!HeroNames.Any(h => h == hero.Key))
            {
                heroToRemove.Add(hero.Key);
            }
        }
        foreach(var hero in heroToRemove)
        {
            _heroes.Remove(hero);
        }
        foreach(var name in HeroNames)
        {
            if(name == GlobalConsts.EmptyHero || _cachedHeroNames.Any(n=> n == name))
            {
                continue;
            }
            var html = await HeroLoader.LoadHero(name);
            _heroes[name] = HeroParser.ParseHero(html);
            canCalculate = true;

        }
        _isBusy = false;
        _cachedHeroNames = new List<string>(HeroNames);
        if (canCalculate)
        {
            Calculate();
        }
    }

    private void Calculate()
    {
        List<DotaHero> heroes = new List<DotaHero>();
        var groups = _heroes.SelectMany(h => h.Value).GroupBy(h => h.Name);
        foreach (var group in groups)
        {
            if (group.Count() == _heroes.Count)
            {
                var dotaHeroes = group.Select(g => g);
                double disadvantage = 0;
                foreach (var hero in dotaHeroes)
                {
                    disadvantage += hero.Disadvantage;
                }
                heroes.Add(new DotaHero(group.Key, disadvantage));
            } 
        }
        heroes.Sort(new DotaHeroComparer());
        _calculatedHeroes = heroes;
    }

    private string GetHeroImageName(string heroName)
    {
        return heroName.ToLower().Replace(" ", "-") + GlobalConsts.HeroImageExtension;
    }

    public class DotaHeroComparer : IComparer<DotaHero>
    {
        public int Compare(DotaHero a, DotaHero b)
        {
            if(a.Disadvantage < b.Disadvantage){
                return 1;
            }
            if (a.Disadvantage > b.Disadvantage)
            {
                return -1;
            }
            return 0;
        }
    }
}
