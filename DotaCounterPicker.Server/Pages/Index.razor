@page "/"
@using Blazored.Modal
@using Blazored.Modal.Services
@using DotaCounterPicker.Server.Utils
@inject IJSRuntime JS
@inject IModalService ModalService
<PageTitle>Index</PageTitle>


<h1>Enemy heroes</h1>

<div class="row justify-content-start">
    @for (int i = 0; i < _heroes.Length; i++)
    {
        var heroIndex = i;
        <button class="col-auto hero-image border" @onclick="async ()=>await PickHero(heroIndex)">
            @if (@_heroes[i] == GlobalConsts.EmptyHero)
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="70" height="70" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16"> <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" /> </svg>
            }
            else
            {
                <img class="" src="heroes/@GetImagePath(_heroes[i] )" />
            }
        </button>


    }
</div>
@if (AnyHeroPicked)
{
    <div class="mt-5">
        <FetchData HeroNames="@_heroes" />
    </div>
}

@code{
    public bool AnyHeroPicked => _heroes.Any(h => h != GlobalConsts.EmptyHero);

    string[] _heroes = new string[5]
    {
        GlobalConsts.EmptyHero,
        GlobalConsts.EmptyHero,
        GlobalConsts.EmptyHero,
        GlobalConsts.EmptyHero,
        GlobalConsts.EmptyHero
    };


    private async Task PickHero(int heroIndex)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(HeroPicker.RestrictHeroes), _heroes);

        var modalReference = ModalService.Show<HeroPicker>(
            "Pick enemy hero", 
        parameters,
        new Blazored.Modal.ModalOptions()
        {
            Size=Blazored.Modal.ModalSize.Automatic

        });
        var res = await modalReference.Result;
        if(res.Data is string heroName)
        {
            _heroes[heroIndex] = heroName;
        }
    }

    private string GetImagePath(string heroName)
    {
        return heroName += GlobalConsts.HeroImageExtension;
    }
}